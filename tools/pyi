#!/usr/bin/env python3

import os
import subprocess
import sys
from typing import List

# ----------------------------------------------------------------------------
# GLOBAL SETTINGS
# ----------------------------------------------------------------------------

PACKAGES: List[str] = [
    "packages/nuke/src/nuke",
    "packages/ngne/src/ngne",
    "packages/nasa/src/nasa",
    "src/pneo",
]

# Stubs are generated in the output directory.
OUTPUT_PATH: str = "typings"


# ----------------------------------------------------------------------
# OS PROCESS HELPERS
# ----------------------------------------------------------------------


def run_command(command_args: List[str], silent: bool = False) -> bool:
    """
    Runs any shell command using the subprocess module, ensuring cross-platform compatibility.

    Args:
        command_args (List[str]): A list of strings representing the command and its arguments.

        silent (bool): If True, suppresses output unless an error occurs.

    Returns:
        bool: True if the command executed successfully, False otherwise.
    """
    if not silent:
        print(f"--- Running:  {' '.join(command_args)}")

    try:
        # Use subprocess.run to execute the command.
        # check=True raises an exception for non-zero return codes (errors).
        # Using a list for the command ensures cross-platform compatibility.
        result = subprocess.run(
            command_args, check=True, capture_output=True, text=True
        )

        if not silent:
            # Print the standard output and error output from the command
            if result.stdout:
                print(result.stdout.strip())
            if result.stderr:
                print(result.stderr.strip(), file=sys.stderr)

        print("\n✅ Command executed successfully.")
        return True

    except subprocess.CalledProcessError as e:
        print(
            f"\n❌ Error running shell command (Exit Code {e.returncode}):",
            file=sys.stderr,
        )
        if e.stdout:
            print("--- STDOUT (Context) ---", file=sys.stderr)
            print(e.stdout.strip(), file=sys.stderr)
        if e.stderr:
            print("--- STDERR (Details) ---", file=sys.stderr)
            print(e.stderr.strip(), file=sys.stderr)
        return False

    except FileNotFoundError:
        # This occurs if command executable is not found in the system's PATH
        print("\n❌ Error: The command executable was not found.", file=sys.stderr)
        return False

    except Exception as e:
        print(f"\n❌ An unexpected error occurred: {e}", file=sys.stderr)
        return False

    finally:
        print("\n" + "=" * 50 + "\n")


def run_stubgen_command(stubgen_args: List[str], silent: bool = False) -> bool:
    """
    Runs any stubgen command using the subprocess module, ensuring cross-platform compatibility.

    Args:
        stubgen_args (List[str]): A list of strings representing the stubgen command and its arguments,
                                    e.g., ['-o', 'typings', '.'].
                                    **Do NOT include 'stubgen' itself.**

        silent (bool): If True, suppresses output unless an error occurs.

    Returns:
        bool: True if the command executed successfully, False otherwise.
    """
    # The full command starts with the 'stubgen' executable.
    command = ["stubgen"] + stubgen_args

    return run_command(command, silent)


# ----------------------------------------------------------------------------
# ENTRY-POINT CHECK
# ----------------------------------------------------------------------------

# This module cannot be loaded by another module.
if __name__ != "__main__":
    sys.exit("This module 'pylocale' cannot be loaded by another module.")
# proceeds only if this program was executed as entry-point...

#  Get the current working directory and extract the last part of the path.
current_dir = os.getcwd()
current_dir_name = os.path.basename(current_dir)

# Check if the current directory is not root of project.
if current_dir_name == "tools":
    # Change the current working directory to the parent directory (root of project).
    parent_dir = os.path.join(current_dir, "..")
    os.chdir(parent_dir)
    print(f"✅ Detected running from **/tools. Changed directory to: {os.getcwd()}\n")

# ----------------------------------------------------------------------
# GENERATE DRAFT STUBS FOR MODULES.
# ----------------------------------------------------------------------

result_ok: bool = False

# execute the command `stubgen` for all packages, each with its source directory.
for dir_name in PACKAGES:
    # generate stubs for given directory.
    result_ok = run_stubgen_command(["-o", OUTPUT_PATH, dir_name])
    if not result_ok:
        sys.exit(1)

# everything ok!
sys.exit(0)
