---
version: 1
disable_existing_loggers: False

formatters:
  # avoid filling the console with information, 
  # only showing what is necessary.
  simple:
    #    format: "%(message)s"
    format: "\r%(asctime)s.%(msecs)03d %(levelname)-5s %(module)s.%(funcName)s<%(lineno)d> [!] %(message)s"

handlers:
  # as there is no log file, it shows from INFO on the console.
  console:
    level: DEBUG
    class: logging.StreamHandler
    formatter: simple
    stream: ext://sys.stdout

loggers:
  # only the errors from any of the libraries are of interest, 
  # but lets root decide whether to show it in the console.
  antlr4:
    level: ERROR
    handlers: [ ]
    propagate: yes

  anytree:
    level: ERROR
    handlers: [ ]
    propagate: yes

  babel:
    level: ERROR
    handlers: [ ]
    propagate: yes

  click:
    level: ERROR
    handlers: [ ]
    propagate: yes

  colorama:
    level: ERROR
    handlers: [ ]
    propagate: yes

  jinja2:
    level: ERROR
    handlers: [ ]
    propagate: yes

  platformdirs:
    level: ERROR
    handlers: [ ]
    propagate: yes

  pygls:
    level: ERROR
    handlers: [ ]
    propagate: yes

  rich:
    level: ERROR
    handlers: [ ]
    propagate: yes

  tomli:
    level: ERROR
    handlers: [ ]
    propagate: yes

  tqdm:
    level: ERROR
    handlers: [ ]
    propagate: yes

  watchdog:
    level: ERROR
    handlers: [ ]
    propagate: yes

  webview:
    level: ERROR
    handlers: [ ]
    propagate: yes

  yaml:
    level: ERROR
    handlers: [ ]
    propagate: yes

  # lets root decide whether to show it in the console.
  pneo:
    level: DEBUG
    handlers: [ ]
    propagate: yes

  ngne:
    level: DEBUG
    handlers: [ ]
    propagate: yes

  nasa:
    level: DEBUG
    handlers: [ ]
    propagate: yes

root:
  level: DEBUG
  handlers: [ console ]
  # propagate in root is unnecessary.
